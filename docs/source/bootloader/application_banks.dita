<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="application-banks">
    <title>Application Banks</title>
    <prolog>
        <data name="sidebar_position" value="3"/>
    </prolog>
    <body>
        <p>For this project, we enabled three application flash banks, <b>Bank A</b>, <b>Bank B</b>
            and <b>Bank C</b>. It is done to showcase in our OOBE all projects
                (<codeph>coffee_machine, elevator</codeph>) simultaneously.</p>
        <p>In a real-life scenario, only 2 banks are needed. In the updating mechanism that has been
            implemented, we use 2 banks by doing a ping-pong between <codeph>Bank A</codeph> and
                <codeph>Bank B</codeph>.</p>
        <p>The SLN-TLHMI-IOT utilizes a series of dual "application flash banks" used as a
            redundancy mechanism when updating the firmware via one of the bootloader's update
            mechanisms in the "boot_modes/mass_storage_device_updates.md" file or via the AWS OTA
            mechanism.</p>
    </body>
    <topic id="banks">
        <title>Banks</title>
        <body>
            <p>The application we developed for SLN-TLHMI has 2 inter-dependent parts:</p>
            <ul>
                <li><p>Application (code)</p></li>
                <li><p>Resources (icons, sounds, pictures)</p></li>
            </ul>
            <p>So a bank is a reserved space in the flash that stores both of these components. The
                application running tries to read resources from the same bank.</p>
            <p>In the OOBE the size of a bank is 20MB (0x1400000), 6 MB (0x600000) for the code area
                and 14 MB (0xE00000) for resources. If there is a need to increase or decrease this
                value, check "fica_definitions.h" file.</p>
            <codeblock xml:space="preserve" outputclass="{figure}">:align: center
:alt: Bank Components

Bank Components</codeblock>
        </body>
    </topic>
    <topic id="addresses">
        <title>Addresses</title>
        <body>
            <p>The flash address for each of the application flash banks is as follows:</p>
            <ul>
                <li><p>Bank A - <codeph>0x30100000</codeph></p><ul>
                        <li><p>Bank A App - <codeph>0x30100000</codeph></p></li>
                        <li><p>Bank A resources - <codeph>0x30700000</codeph></p></li>
                    </ul></li>
                <li><p>Bank B - <codeph>0x31500000</codeph></p><ul>
                        <li><p>Bank B App - <codeph>0x31500000</codeph></p></li>
                        <li><p>Bank B resources - <codeph>0x31B00000</codeph></p></li>
                    </ul></li>
                <li><p>Bank C - <codeph>0x32900000</codeph></p><ul>
                        <li><p>Bank C App - <codeph>0x32900000</codeph></p></li>
                        <li><p>Bank C resources - <codeph>0x32F00000</codeph></p></li>
                    </ul></li>
            </ul>
        </body>
    </topic>
    <topic id="remapping">
        <title>Remapping</title>
        <body>
            <p>The i.MXRT117H chip supports the flash remapping function, which allows users to
                remap flash address to the FlexSPI interface. The flash remapping function is
                beneficial in the following use-cases:</p>
            <ul>
                <li><p>To flash multiple firmware.</p></li>
                <li><p>To switch one of the firmware to run when the condition is met.</p></li>
                <li><p>To update the firmware in the wireless application (the usual process is to
                        download the firmware to flash, perform the validity check, and then switch
                        to new firmware to run. The flash remapping function helps to directly run
                        the firmware wherever it locates to XIP flash.)</p></li>
            </ul>
            <p>For more information, check: <xref
                    href="https://www.nxp.com/docs/en/application-note/AN12255.pdf" format="pdf"
                    scope="external">How to Use Flash Remapping Function</xref></p>
            <p>In older Solution's projects like <xref
                href="https://www.nxp.com/design/designs/nxp-edgeready-mcu-based-solution-for-3d-face-recognition:VIZN3D"
                    format="html" scope="external">SLN-VIZN3D-IOT</xref> and <xref
                        href="https://www.nxp.com/design/designs/nxp-edgeready-mcu-based-solution-for-face-recognition-with-liveness-detection:SLN-VIZNAS-IOT"
                    format="html" scope="external">SLN-VIZNAS-IOT</xref>, the images were built for
                a specific bank. With the enablement of the remapping functionality, all
                applications must be built having the Flash Starting Address set to
                    <codeph>0x30100000</codeph>.</p>
            <p>The updating mechanisms implemented in the bootloader or the main application, also
                leverage this feature. Because of this, the updating procedure does not have to keep
                track of what bank the application is running from. The binary that is going to be
                used for an update, is always going to be built with the <codeph>BANK A</codeph>
                memory settings and is going to be placed in the non-active slot.</p>
            <codeblock xml:space="preserve"> The OOBE is meant to showcase all 3 application. After an update procedure, the application that was written in a not active bank is going to be overwritten.</codeblock>
        </body>
        <topic id="convert-axf-to-bin">
            <title>Convert .axf to .bin</title>
            <body>
                <p>When building a project in MCUXpresso IDE, the default behavior is to create a
                        <codeph>.axf</codeph> file. However, some of the bootloader update
                    mechanisms including <xref href="boot_modes/mass_storage_device_updates.md"
                        format="markdown">MSD updates</xref> require the use of a
                        <codeph>.bin</codeph> file.</p>
                <p>Converting a <codeph>.axf</codeph> file to <codeph>.bin</codeph> can be done in
                    MCUXpresso without any additional setup.</p>
                <p>To perform this conversion, navigate to the project directory that contains your
                    compiled project binary and right-click the <codeph>.axf</codeph> file in that
                    directory.</p>
                <p>:::info The binary for your project is likely located in either the <b>Debug</b>
                    or <b>Release</b> folder depending on your current build config. :::</p>
                <p>In the context menu, select <b>Binary Utilities-&gt;Create binary</b>.</p>
                <codeblock xml:space="preserve" outputclass="{figure}">:align: center
:alt: Convert to binary

Convert to binary</codeblock>
                <p>Verify that the binary has been successfully created.</p>
            </body>
        </topic>
    </topic>
</topic>
