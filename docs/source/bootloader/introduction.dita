<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="introduction">
    <title>Introduction</title>
    <prolog>
        <data name="sidebar_position" value="1"/>
    </prolog>
    <body>
        <p>The Smart Lock project uses a "bootloader + main application" architecture to provide
            additional security and update-related functionality to the main application. The
            bootloader handles all boot-related tasks including, but not limited to:</p>
        <ul>
            <li><p>Launching the main application and, if necessary, initializing the
                    peripherals</p></li>
            <li><p>Firmware updates using either the Mass Storage Device (MSD), Over-the-Air, or
                    Over-the-Wire update method</p><ul>
                    <li><p>Protects against update failures by using a primary and backup
                            application "flash bank"</p></li>
                </ul></li>
            <li><p>Image certification/verification</p></li>
        </ul>
    </body>
    <topic id="why-use-a-bootloader">
        <title>Why use a bootloader?</title>
        <body>
            <p>By separating the boot process from the main application, the main application can be
                safely updated and verified without the risk of creating an irrecoverable state due
                to a failed update, or running a malicious, unauthorized, and unsigned firmware
                binary flashed by a bad actor. It is essential in any production application that
                precautions be taken to ensure the integrity and stability of the firmware before,
                during, and after an update, and the bootloader application is simply one measure to
                help provide this assurance.</p>
            <p>The following sections describes how to use many of the bootloader's primary features
                to assist developer's interested in understanding, utilizing, and expanding
                them.</p>
        </body>
    </topic>
    <topic id="application-banks">
        <title>Application Banks</title>
        <body>
            <p>The bootloader file system uses dual application "banks" referred to as "Bank A" and
                "Bank B" to provide a backup/redundancy "known good" application to prevent bricking
                when flashing an update via either the MSD, OTA, or OTW update method. For example,
                if an application update is being flashed via MSD to the Bank A application bank,
                even if that update should fail midway through Bank B will still contain a fully
                operational backup.</p>
            <p>In the SLN-TLHMI-IOT, Bank A is at <codeph>0x30100000</codeph> while Bank B is at
                    <codeph>0x31500000</codeph>.</p>
            <p>Providing an application binary built for the proper application bank address is
                crucial during MSD, OTA, and OTW updates, and failure to do so will result in a
                failure to flash the binary.</p>
            <codeblock xml:space="preserve">The bootloader will not automatically recover from a botched flashing procedure,
but will instead revert to the alternate working application flash bank instead.</codeblock>
        </body>
    </topic>
    <topic id="logging">
        <title>Logging</title>
        <body>
            <p>The bootloader supports debug logging over UART to help diagnose and debug issues
                that may arise while using or modifying the bootloader. For example, the debug
                logger can be helpful when trying to understand why an application update might have
                failed.</p>
            <p>Logging is enabled by default in the <codeph>Debug</codeph> build mode configuration.
                The logging functionality, however, comes with an increase in bootloader
                performance, and can slow down the boot process by as much as 200ms. As a result, it
                may be desirable to disable debug logging in production applications. To disable
                logging in the bootloader, simply build and run the bootloader in the
                    <codeph>Release</codeph> build mode configuration. It can be done by
                right-clicking on the bootloader project in the <codeph>Project Explorer</codeph>
                view and navigating to <codeph>Build Configurations -&gt; Set Active -&gt;
                    Release</codeph> as shown in the figure below:</p>
            <p>To make use of the debug logging feature, use a UART-&gt;USB converter to:</p>
            <ul>
                <li><p>Connect <codeph>GND</codeph> pin of converter to <codeph>J202: Pin
                        8</codeph></p></li>
                <li><p>Connect <codeph>TX</codeph> pin of converter to <codeph>J202: Pin
                        3</codeph></p></li>
                <li><p>Connect <codeph>RX</codeph> pin of converter to <codeph>J202: Pin
                        4</codeph></p></li>
            </ul>
            <p>Once the converter has been properly attached, connect to the board using a serial
                terminal emulator like <i>PuTTY</i> or <i>Tera Term</i> configured with the
                following serial settings:</p>
            <ul>
                <li><p>Speed: <codeph>115200</codeph></p></li>
                <li><p>Data: <codeph>8 Bit</codeph></p></li>
                <li><p>Parity: <codeph>None</codeph></p></li>
                <li><p>Stop Bits: <codeph>1 bit</codeph></p></li>
                <li><p>Flow Control: <codeph>None</codeph></p></li>
            </ul>
        </body>
    </topic>
</topic>
