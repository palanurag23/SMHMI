<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="low-power-devices">
    <title>Low Power Devices</title>
    <body>
        <p>The Low Power/<codeph>LPM</codeph> HAL device represents an abstraction used to implement
            a device which controls the power management of the device by configuring the chip-level
            power mode (normal operation, SNVS, etc.).</p>
        <p>Unlike other devices which may represent a real, physical device, the low power HAL
            device is purely a "virtual" abstraction mechanism representing the chip's power
            regulation controls. As a result, the low power HAL device is platform-dependent because
            it relies on the different power modes and configuration options made available by the
            platform being used. Additionally, only one low power HAL device can (and is necessary
            to) be registered at a time because a chip's power regulatory functionality will not
            typically require multiple disparate components. This means that the API calls to the
                <codeph>Low Power Manager</codeph>(refer to "device_managers/lpm_manager.md") are
            essentially wrappers over the single LPM device's <codeph>operators</codeph>.</p>
        <p>As for functionality, the low power HAL device provides:</p>
        <ul>
            <li><p>Multi-level low-power switching</p></li>
            <li><p>Manual power state configuration</p></li>
            <li><p>Automatic power state configuration via periodic idle checks and other
                flags</p></li>
        </ul>
        <p>The low power mode device also provides an exit mechanism which is called before entering
            low power mode, to ensure components are properly shut down before sleeping. This is
            achieved by using a series of timers, one as a periodic idle check to wait for a
            specified timeout period before shutting down, and the other as an "exit timer" which
            reserves a sufficient amount of time for other HAL devices to properly shutdown.</p>
    </body>
    <topic id="device-definition">
        <title>Device Definition</title>
        <body>
            <p>The HAL device definition for LPM devices can be found under
                "framework/hal_api/hal_lpm_dev.h" and is reproduced below:</p>
            <codeblock xml:space="preserve" outputclass="c">/*! @brief Attributes of a lpm device */
struct _lpm_dev
{
    /* unique id which is assigned by lpm manager during the registration */
    int id;
    /* operations */
    const lpm_dev_operator_t *ops;
    /* timer */
    TimerHandle_t timer;
    /* pre-enter sleep timer */
    TimerHandle_t preEnterSleepTimer;
    /* lock */
    SemaphoreHandle_t lock;
    /* callback */
    lpm_manager_timer_callback_t callback;
    /* preEnterSleepCallback */
    lpm_manager_timer_callback_t preEnterSleepCallback;
};</codeblock>
            <p>The device <codeph>operators</codeph> associated with LPM HAL devices are as shown
                below:</p>
            <codeblock xml:space="preserve" outputclass="c">/*! @brief Callback function to timeout check requester list busy status. */
typedef int (*lpm_manager_timer_callback_t)(lpm_dev_t *dev);

/*! @brief Operation that needs to be implemented by a lpm device */
typedef struct _lpm_dev_operator
{
    hal_lpm_status_t (*init)(lpm_dev_t *dev,
                             lpm_manager_timer_callback_t callback,
                             lpm_manager_timer_callback_t preEnterSleepTimer);
    hal_lpm_status_t (*deinit)(const lpm_dev_t *dev);
    hal_lpm_status_t (*openTimer)(const lpm_dev_t *dev);
    hal_lpm_status_t (*stopTimer)(const lpm_dev_t *dev);
    hal_lpm_status_t (*openPreEnterTimer)(const lpm_dev_t *dev);
    hal_lpm_status_t (*stopPreEnterTimer)(const lpm_dev_t *dev);
    hal_lpm_status_t (*enterSleep)(const lpm_dev_t *dev, hal_lpm_mode_t mode);
    hal_lpm_status_t (*lock)(const lpm_dev_t *dev);
    hal_lpm_status_t (*unlock)(const lpm_dev_t *dev);
} lpm_dev_operator_t;

typedef struct _hal_lpm_request
{
    void *dev;                              /* request dev handle */
    char name[LPM_REQUEST_NAME_MAX_LENGTH]; /* request name */
} hal_lpm_request_t;</codeblock>
        </body>
    </topic>
    <topic id="operators">
        <title>Operators</title>
        <body>
            <p>Operators are functions which "operate" on a HAL device itself. Operators are akin to
                "public methods" in object oriented-languages, and are used by the Low Power Manager
                to setup, start, etc. its registered low power device.</p>
            <p>For more information about operators, see <codeph>Operators</codeph>.</p>
        </body>
        <topic id="init">
            <title>Init</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*init)(lpm_dev_t *dev, lpm_manager_timer_callback_t callback,
                                         lpm_manager_timer_callback_t preEnterSleepTimer);</codeblock>
                <p>Initialize the lpm device.</p>
                <p><codeph>Init</codeph> should initialize any hardware resources the lpm device
                    requires (I/O ports, IRQs, etc.), turn on the hardware, and perform any other
                    setup the device requires.</p>
                <p>The <codeph>callback</codeph> function to the device's manager is typically
                    installed as part of the <codeph>Init</codeph> function as well.</p>
                <p>This operator will be called by the Input Manager when the Input Manager task
                    first starts.</p>
            </body>
        </topic>
        <topic id="deinit">
            <title>Deinit</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*deinit)(const lpm_dev_t *dev);</codeblock>
                <p>"Deinitialize" the lpm device.</p>
                <p><codeph>DeInit</codeph> should release any hardware resources the lpm device uses
                    (I/O ports, IRQs, etc.), turn off the hardware, and perform any other shutdown
                    the device requires.</p>
                <p>This operator will be called by the Input Manager when the Input Manager task
                    ends <b><xref keyref="1"/></b>.</p>
                <codeblock xml:space="preserve">**[1]** The `DeInit` function generally will not be called under normal operation.</codeblock>
            </body>
        </topic>
        <topic id="opentimer">
            <title>OpenTimer</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*openTimer)(const lpm_dev_t *dev);</codeblock>
                <p>Kicks off the periodic idle check timer.</p>
            </body>
        </topic>
        <topic id="stoptimer">
            <title>StopTimer</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*stopTimer)(const lpm_dev_t *dev);</codeblock>
                <p>Stops the periodic idle check timer.</p>
                <p>After all busy requests (BLE connection established, face registration in
                    progress) have ceased, this function will be called and begin the shutdown
                    process for other HAL devices.</p>
            </body>
        </topic>
        <topic id="openpreentertimer">
            <title>OpenPreEnterTimer</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*openPreEnterTimer)(const lpm_dev_t *dev);</codeblock>
                <p>Kicks off the <codeph>preEnterSleepTimer</codeph>.</p>
                <p>The <codeph>preEnterSleepTimer</codeph> is used to provide other HAL devices
                    sufficient time to properly shutdown before the board enters sleep mode. This
                    function will be called after the periodic idle check timer has stopped (due to
                    a timeout).</p>
            </body>
        </topic>
        <topic id="stoppreentertimer">
            <title>StopPreEnterTimer</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*stopPreEnterTimer)(const lpm_dev_t *dev);</codeblock>
                <p>Stops the <codeph>preEnterSleepTimer</codeph>.</p>
                <p>This function is called to stop the timer associated with the pre-sleep shutdown
                    process. After this timer ends, the <codeph>EnterSleep</codeph> function will be
                    called and the device will power down.</p>
            </body>
        </topic>
        <topic id="entersleep">
            <title>EnterSleep</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*enterSleep)(const lpm_dev_t *dev, hal_lpm_mode_t mode);</codeblock>
                <p>Enter sleep mode using the low power mode specified in the function call <b><xref
                            keyref="2"/></b>.</p>
                <codeblock xml:space="preserve">**[2]** The power modes available vary based on the platform in use.</codeblock>
            </body>
        </topic>
        <topic id="lock">
            <title>Lock</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*lock)(const lpm_dev_t *dev);</codeblock>
                <p>Acquire the lock for the low power device.</p>
                <p>The low power manager uses a lock-based system to prevent accidentally entering
                    sleep mode before all devices are ready to enter sleep. The
                        <codeph>Lock</codeph> function is called by the Low Power manager in
                    response to a HAL device signaling that it is performing a critical function
                    which requires that the board does not enter sleep until complete.</p>
            </body>
        </topic>
        <topic id="unlock">
            <title>Unlock</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t (*unlock)(const lpm_dev_t *dev);</codeblock>
                <p>Release the lock for the low power device.</p>
                <p>The low power manager uses a lock-based system to prevent accidentally entering
                    sleep mode before all devices are ready to enter sleep. The
                        <codeph>Unlock</codeph> function is called by the Low Power manager in
                    response to a HAL device signaling that it is finished performing a critical
                    function which required that the board did not enter sleep until it was
                    completed.</p>
            </body>
        </topic>
    </topic>
    <topic id="components">
        <title>Components</title>
        <body/>
        <topic id="timer">
            <title>timer</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/* timer */
TimerHandle_t timer;</codeblock>
                <p>This timer is use to periodically check busy requests from other HAL devices.</p>
            </body>
        </topic>
        <topic id="preentersleeptimer">
            <title>preEnterSleepTimer</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/* pre-enter sleep timer */
TimerHandle_t preEnterSleepTimer;</codeblock>
                <p>This timer is used to provide a sufficient amount of time for HAL devices to
                    shutdown prior to entering sleep mode.</p>
            </body>
        </topic>
        <topic id="lock-1">
            <title>lock</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/* lock */
SemaphoreHandle_t lock;</codeblock>
                <p>This lock is used to maintain thread safety when multiple task need to call the
                    Low Power Manager, and is managed by the Low Power Manager.</p>
            </body>
        </topic>
        <topic id="callback">
            <title>callback</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/* callback */
lpm_manager_timer_callback_t callback;</codeblock>
                <p>Callback to the Low Power Manager. The HAL device invokes this callback to notify
                    the vision algorithm manager of specific events.</p>
                <p>The Low Power Manager will provide this callback to the device when the
                        <codeph>init</codeph> operator is called. As a result, the HAL device should
                    make sure to store the callback in the <codeph>init</codeph> operator's
                    implementation.</p>
                <codeblock xml:space="preserve" outputclass="c">hal_lpm_status_t HAL_LpmDev_Init(lpm_dev_t *dev,
                                lpm_manager_timer_callback_t callback,
                                lpm_manager_timer_callback_t preEnterSleepCallback)
{
    int ret = kStatus_HAL_LpmSuccess;

    dev-&gt;callback              = callback;
    dev-&gt;preEnterSleepCallback = preEnterSleepCallback;</codeblock>
            </body>
        </topic>
        <topic id="preentersleepcallback">
            <title>PreEnterSleepCallback</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/* preEnterSleepCallback */
lpm_manager_timer_callback_t preEnterSleepCallback;</codeblock>
                <p>Callback function which is called after the "preEnterSleep" timer terminates.</p>
                <codeblock xml:space="preserve">This callback comes from the LPM Manager</codeblock>
            </body>
        </topic>
    </topic>
    <topic id="example">
        <title>Example</title>
        <body>
            <p>Because only one low power device can be registered at a time per the design of the
                framework, the project has only one low power device implemented.</p>
            <p>The source file for this low power device can be found at "framework/hal/misc/".</p>
            <p>In this example, we will demonstrate the use of a low power device (using FreeRTOS
                for timers, etc.) in conjunction with a device/manager of a different type.</p>
            <p>The <codeph>LPM Manager Device</codeph> implements all the power switching
                functionality we need, while the <codeph>secondary device/manager</codeph> will
                attempt to make busy requests (lock the LPM device) and enable/disable low power
                mode.</p>
        </body>
        <topic id="lpm-manager-device">
            <title>LPM Manager Device</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/* Here call periodic callback to check idle status. */
static void HAL_LpmDev_TimerCallback(TimerHandle_t handle)
{
    if (handle == NULL)
    {
        return;
    }

    lpm_dev_t *pDev = (lpm_dev_t *)pvTimerGetTimerID(handle);
    if (pDev-&gt;callback != NULL)
    {
        pDev-&gt;callback(pDev);
    }
}

/* Here call preEnterSleepCallback. Duing this time, all device have already exit. So this callback will call enterSleep operator to enter low power mode. */
static void HAL_LpmDev_PreEnterSleepTimerCallback(TimerHandle_t handle)
{
    if (handle == NULL)
    {
        return;
    }

    lpm_dev_t *pDev = (lpm_dev_t *)pvTimerGetTimerID(handle);
    if (pDev-&gt;preEnterSleepCallback != NULL)
    {
        pDev-&gt;preEnterSleepCallback(pDev);
    }
}

hal_lpm_status_t HAL_LpmDev_Init(lpm_dev_t *dev,
                                lpm_manager_timer_callback_t callback,
                                lpm_manager_timer_callback_t preEnterSleepCallback)
{
    int ret = kStatus_HAL_LpmSuccess;

    dev-&gt;callback              = callback;
    dev-&gt;preEnterSleepCallback = preEnterSleepCallback;

    /* put low power hardware init here */

    /* put periodic timer create and init here */
    dev-&gt;timer = xTimerCreate("LpmTimer", pdMS_TO_TICKS(1000), pdTRUE, (void *)dev, HAL_LpmDev_TimerCallback);
    if (dev-&gt;timer == NULL)
    {
        return kStatus_HAL_LpmTimerNull;
    }

    /* put exit timer create and init here */
    dev-&gt;preEnterSleepTimer = xTimerCreate("LpmPreEnterSleepTimer", pdMS_TO_TICKS(1500), pdTRUE, (void *)dev,
                                           HAL_LpmDev_PreEnterSleepTimerCallback);
    if (dev-&gt;preEnterSleepTimer == NULL)
    {
        return kStatus_HAL_LpmTimerNull;
    }

    /* put lock create and init here */
    dev-&gt;lock = xSemaphoreCreateMutex();
    if (dev-&gt;lock == NULL)
    {
        return kStatus_HAL_LpmLockNull;
    }

    /* put init low power mode and status here, detial can find in lpm_manager. */
    FWK_LpmManager_SetSleepMode(kLPMMode_SNVS);
    FWK_LpmManager_EnableSleepMode(kLPMManagerStatus_SleepDisable);

    return ret;
}

hal_lpm_status_t HAL_LpmDev_Deinit(const lpm_dev_t *dev)
{
    int ret = kStatus_HAL_LpmSuccess;

    return ret;
}

hal_lpm_status_t HAL_LpmDev_OpenTimer(const lpm_dev_t *dev)
{
    int ret = kStatus_HAL_LpmSuccess;

    if (dev-&gt;timer == NULL)
    {
        return kStatus_HAL_LpmTimerNull;
    }

    if (xTimerStart(dev-&gt;timer, 0) != pdPASS)
    {
        ret = kStatus_HAL_LpmTimerFail;
    }

    return ret;
}

hal_lpm_status_t HAL_LpmDev_StopTimer(const lpm_dev_t *dev)
{
    int ret = kStatus_HAL_LpmSuccess;

    if (dev-&gt;timer == NULL)
    {
        return kStatus_HAL_LpmTimerNull;
    }

    if (xTimerStop(dev-&gt;timer, 0) != pdPASS)
    {
        ret = kStatus_HAL_LpmTimerFail;
    }

    return ret;
}

hal_lpm_status_t HAL_LpmDev_OpenPreEnterSleepTimer(const lpm_dev_t *dev)
{
    int ret = kStatus_HAL_LpmSuccess;

    if (dev-&gt;preEnterSleepTimer == NULL)
    {
        return kStatus_HAL_LpmTimerNull;
    }

    if (xTimerStart(dev-&gt;preEnterSleepTimer, 0) != pdPASS)
    {
        ret = kStatus_HAL_LpmTimerFail;
    }

    return ret;
}

hal_lpm_status_t HAL_LpmDev_StopPreEnterSleepTimer(const lpm_dev_t *dev)
{
    int ret = kStatus_HAL_LpmSuccess;

    if (dev-&gt;preEnterSleepTimer == NULL)
    {
        return kStatus_HAL_LpmTimerNull;
    }

    if (xTimerStop(dev-&gt;preEnterSleepTimer, 0) != pdPASS)
    {
        ret = kStatus_HAL_LpmTimerFail;
    }

    return ret;
}

hal_lpm_status_t HAL_LpmDev_EnterSleep(const lpm_dev_t *dev, hal_lpm_mode_t mode)
{
    int ret = kStatus_HAL_LpmSuccess;
    switch (mode)
    {
        case kLPMMode_SNVS:
        {
            /* put enter SNVS low power mode here*/
        }
        break;

        default:
            break;
    }

    return ret;
}

hal_lpm_status_t HAL_LpmDev_Lock(const lpm_dev_t *dev)
{
    uint8_t fromISR = __get_IPSR();

    if (dev-&gt;lock == NULL)
    {
        return kStatus_HAL_LpmLockNull;
    }

    if (fromISR)
    {
        BaseType_t HigherPriorityTaskWoken = pdFALSE;
        if (xSemaphoreTakeFromISR(dev-&gt;lock, &amp;HigherPriorityTaskWoken) != pdPASS)
        {
            return kStatus_HAL_LpmLockError;
        }
    }
    else
    {
        if (xSemaphoreTake(dev-&gt;lock, portMAX_DELAY) != pdPASS)
        {
            return kStatus_HAL_LpmLockError;
        }
    }

    return kStatus_HAL_LpmSuccess;
}

hal_lpm_status_t HAL_LpmDev_Unlock(const lpm_dev_t *dev)
{
    uint8_t fromISR = __get_IPSR();

    if (dev-&gt;lock == NULL)
    {
        return kStatus_HAL_LpmLockNull;
    }

    if (fromISR)
    {
        BaseType_t HigherPriorityTaskWoken = pdFALSE;
        if (xSemaphoreGiveFromISR(dev-&gt;lock, &amp;HigherPriorityTaskWoken) != pdPASS)
        {
            return kStatus_HAL_LpmLockError;
        }
    }
    else
    {
        if (xSemaphoreGive(dev-&gt;lock) != pdPASS)
        {
            return kStatus_HAL_LpmLockError;
        }
    }

    return kStatus_HAL_LpmSuccess;
}

static lpm_dev_operator_t s_LpmDevOperators = {
    .init              = HAL_LpmDev_Init,
    .deinit            = HAL_LpmDev_Deinit,
    .openTimer         = HAL_LpmDev_OpenTimer,
    .stopTimer         = HAL_LpmDev_StopTimer,
    .openPreEnterTimer = HAL_LpmDev_OpenPreEnterSleepTimer,
    .stopPreEnterTimer = HAL_LpmDev_StopPreEnterSleepTimer,
    .enterSleep        = HAL_LpmDev_EnterSleep,
    .lock              = HAL_LpmDev_Lock,
    .unlock            = HAL_LpmDev_Unlock,
};

static lpm_dev_t s_LpmDev = {
    .id  = 0,
    .ops = &amp;s_LpmDevOperators,
};

int HAL_LpmDev_Register()
{
    int ret = 0;

    FWK_LpmManager_DeviceRegister(&amp;s_LpmDev);

    return ret;
}</codeblock>
            </body>
        </topic>
        <topic id="requesting-device">
            <title>Requesting Device</title>
            <body>
                <p>As part of this example, we assume an LPM device is running at the same time as a
                    "requesting device" (camera, vision algo, etc.) of a different type which is
                    performing some critical functionality.</p>
                <p>Supposing this example "requesting device" (aptly named "ExampleDev") performs
                    some critical functionality inside
                        <codeph>HAL_InputDev_ExampleDev_Critical</codeph> will set the request busy
                    by calling <codeph>FWK_LpmManager_RuntimeGet</codeph>, thus acquiring the lock
                    which prevents changes to the current power mode state.</p>
                <p>After the device has completed its critical functionality, it will use use
                        <codeph>FWK_LpmManager_RuntimePut</codeph> to release the lock which
                    prevents changes to the current power mode state.</p>
                <codeblock xml:space="preserve" outputclass="c">static hal_lpm_request_t s_LpmReq = {
    .dev  = &amp;s_InputDev,
    .name = "lpm device",
};

int HAL_InputDev_ExampleDev_Critical(void)
{
    FWK_LpmManager_RuntimeGet(&amp;s_LpmReq);

    /* perform critical function here */

    FWK_LpmManager_RuntimePut(&amp;s_LpmReq);
}

int HAL_InputDev_ExampleDev_Register(void)
{
    hal_input_status_t status = kStatus_HAL_InputSuccess;

    status = FWK_LpmManager_RegisterRequestHandler(&amp;s_LpmReq);

    return status;
}</codeblock>
            </body>
        </topic>
    </topic>
</topic>
