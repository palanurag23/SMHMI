<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="flash-manager">
    <title>Flash manager</title>
    <body>
        <p>The Flash manager is used to provide an abstraction for an underlying filesystem
            implementation.</p>
        <p>Due to the unique nature of the filesystem being an abstract "virtual" device, only one
            flash device can be registered at a time. However, generally there should be no need to
            have more than one filesystem. It means the Flash manager's API functions essentially
            act as wrappers that call the <codeph>Operators</codeph> of the underlying flash HAL
            device.</p>
        <codeblock xml:space="preserve">Flash access is exclusive, one request at a time.</codeblock>
        <codeblock xml:space="preserve">When working with the Flash Manager,
unlike most other managers,
`FWK_Flash_DeviceRegister` should be called _before_ `FWK_Flash_Init`.</codeblock>
    </body>
    <topic id="device-apis">
        <title>Device APIs</title>
        <body/>
        <topic id="fwk-flash-deviceregister">
            <title>FWK_Flash_DeviceRegister</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Only one flash device is supported. Registered a flash filesystem device
 * @param dev Pointer to a flash device structure
 * @return int Return 0 if registration was successful
 */
int FWK_Flash_DeviceRegister(const flash_dev_t *dev);</codeblock>
                <p>Unlike the flow for most other managers, this function must be called
                        <i>before</i>
                    <codeph>FWK_Flash_Init</codeph>.</p>
            </body>
        </topic>
        <topic id="fwk-flash-init">
            <title>FWK_Flash_Init</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Init internal structures for flash.
 * @return int Return 0 if the init process was successful
 */
sln_flash_status_t FWK_Flash_Init();</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-deinit">
            <title>FWK_Flash_Deinit</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Deinit internal structures for flash.
 * @return int Return 0 if the init process was successful
 */
sln_flash_status_t FWK_Flash_Deinit();</codeblock>
            </body>
        </topic>
    </topic>
    <topic id="operations-apis">
        <title>Operations APIs</title>
        <body>
            <p>The Flash Manager and underlying flash HAL device define only a few operations in
                order to keep the API simple and easy to implement. These API functions include:</p>
            <ul>
                <li><p>Format</p></li>
                <li><p>Save</p></li>
                <li><p>Delete</p></li>
                <li><p>Read</p></li>
                <li><p>Make Directory</p></li>
                <li><p>Make File</p></li>
                <li><p>Append</p></li>
                <li><p>Rename</p></li>
                <li><p>Cleanup</p></li>
            </ul>
            <p>While it might limit filesystem functionality, it also helps to keep the code
                readable, portable, and maintainable.</p>
            <codeblock xml:space="preserve">If the default list of APIs does not satisfy the requirements of a use-case,
the API can always be extended or bypassed in the code directly.</codeblock>
        </body>
        <topic id="fwk-flash-format">
            <title>FWK_Flash_Format</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Format the filesystem
 * @return the status of formatting operation
 */
sln_flash_status_t FWK_Flash_Format();</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-save">
            <title>FWK_Flash_Save</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Save the data into a file from the file system
 * @param path Path of the file in the file system
 * @param buf  Buffer which contains the data that is going to be saved
 * @param size Size of the buffer
 * @return the status of save operation
 */
sln_flash_status_t FWK_Flash_Save(const char *path, void *buf, unsigned int size);</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-append">
            <title>FWK_Flash_Append</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Append the data to an existing file.
 * @param path Path of the file in the file system
 * @param buf  Buffer which contains the data that is going to be append
 * @param size Size of the buffer
 * @param overwrite Boolean parameter. If true the existing file will be truncated. Similar to SLN_flash_save
 * @return the status of append operation
 */
 sln_flash_status_t FWK_Flash_Append(const char *path, void *buf, unsigned int size, bool overwrite);</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-read">
            <title>FWK_Flash_Read</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Read from a file
 * @param path Path of the file in the file system
 * @param buf  Buffer in which to store the read value
 * @param offset If reading in chunks, set offset to file current position
 * @param size Size that was read.
 * @return the status of read operation
 */
sln_flash_status_t FWK_Flash_Read(const char *path, void *buf, unsigned int offset, unsigned int *size);
</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-mkdir">
            <title>FWK_Flash_Mkdir</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Make directory operation
 * @param path Path of the directory in the file system
 * @return the status of mkdir operation
 */
sln_flash_status_t FWK_Flash_Mkdir(const char *path);</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-mkfile">
            <title>FWK_Flash_Mkfile</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Make file with specific attributes
 * @param path Path of the file in the file system
 * @param encrypt Specify if the files should be encrypted. Based on FS implementation
 * this param can be neglected
 * @return the status of mkfile operation
 */
sln_flash_status_t FWK_Flash_Mkfile(const char *path, bool encrypt);</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-rm">
            <title>FWK_Flash_Rm</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Remove file
 * @param path Path of the file that shall be removed
 * @return the status of rm operation
 */
sln_flash_status_t FWK_Flash_Rm(const char *path);</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-rename">
            <title>FWK_Flash_Rename</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Rename existing file
 * @param OldPath Path of the file that is renamed
 * @param NewPath New Path of the file
 * @return status of rename operation
 */
sln_flash_status_t FWK_Flash_Rename(const char *oldPath, const char *newPath);</codeblock>
            </body>
        </topic>
        <topic id="fwk-flash-cleanup">
            <title>FWK_Flash_Cleanup</title>
            <body>
                <codeblock xml:space="preserve" outputclass="c">/**
 * @brief Cleanup function. Might imply defragmentation, erased unused sectors etc.
 *
 * @param timeout Time consuming operation. Set a time constrain to be sure that is not disturbing the system.
 *               Timeout = 0 means no timeout
 * @return status of cleanup operation
 */
sln_flash_status_t FWK_Flash_Cleanup(uint32_t timeout);</codeblock>
            </body>
        </topic>
    </topic>
</topic>
